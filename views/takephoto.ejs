<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />

  <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <script src="face-api.min.js"></script>

  <style>
    video {
      width: 100%;
      height: auto;


    }

    html,
    body {
      height: 100vh;
    }

    #your-img {
      height: auto;
      width: auto;
      max-width: 200px;
      max-height: 200px;
    }



    @media only screen and (min-width : 320px) {
      .webcamcontainer {
        width: 100%;
        flex: 0 0 auto;
        height: 50vh;
      }

      /* CSS */
      .message-container {
        width: 100%;
        flex: 0 0 auto;
        height: 10vh;
        margin-top: 35vh;
      }
    }

    /* Extra Small Devices, Phones */
    @media only screen and (min-width : 480px) {}

    /* Small Devices, Tablets */
    @media only screen and (min-width : 768px) {
      .webcamcontainer {
        width: 66%;
        flex: 0 0 auto;
      }

      .message-container {
        width: 34%;
        flex: 0 0 auto;
        margin-top: 10%;
      }

    }

    #loading {
      position: fixed;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      opacity: 0.7;
      background-color: #fff;
      z-index: 99;
    }

    #loading-image {
      z-index: 1000;
    }
  </style>
  <meta charset="UTF-8">
  <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
  <!-- <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'"> -->
  <!-- <link href="./styles.css" rel="stylesheet"> -->
  <title>Hello World!</title>
  <link rel="./takephoto.css">
</head>

<body>
  <div id="loading">
    <img id="loading-image" src="loading.gif" alt="Loading..." />
  </div>
  <div class="mt-3 container">
    <div style="height: 10vh;"  class="row">
      <div class="col-sm text-center">
        <img src="https://www.denningportal.com/dls_test/assets/images/logo-denning-law-school.png" id="your-img"
          alt="User Icon" />


      </div>
    </div>

    <div class="mt-5 row">
      <div class="webcamcontainer">
        <video id="webcam" autoplay playsinline></video>

      </div>
      <div class="message-container text-center">
        <span id="faceFound"></span>
        <br>
        <button type="button" style="font-size: larger;" class="btn-large btn btn-outline-danger" id="take_picture"><svg
            xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-camera"
            viewBox="0 0 16 16">
            <path
              d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1v6zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2z" />
            <path
              d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5zm0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z" />
          </svg> Take Picture</button>
        <div id="message-content" style="font-size: large;" class="p-3 mt-5 mb-2 bg-info text-center text-white">please
          Verify your face to access portal</div>
        <div class="notes">
          <p>Please make sure that</p>
          <ol>
            <li style="text-align: left">There is not light reflecting the camera from background</li>
            <li style="text-align: left">That only your face is visible in the camera</li>
            <li style="text-align: left">Your face is facing front towards the camera.</li>

          </ol>
        </div>
      </div>

    </div>
  </div>

  <!-- <canvas hidden id="canvas" class="d-none"></canvas> -->
  <!-- <div class="container my-3 ">
  <div class="col-md-12 text-center">
    <div class="col-md-6">

    </div>
    <div class="col-md-6">
      
    </div>
  </div>
      
    </div> -->



  <!-- <h1>Hello World!</h1>
    We are using Node.js <span id="node-version"></span>,
    Chromium <span id="chrome-version"></span>,
    and Electron <span id="electron-version"></span>. -->

  <!-- You can also require other files to run in this process -->



</body>

<script>
  const video = document.getElementById("webcam");
  let predictedAges = [];
  var canvas;

  var interval;

  Promise.all([
    faceapi.nets.ssdMobilenetv1.loadFromUri("/models"),
    faceapi.nets.faceLandmark68Net.loadFromUri("/models"),
    faceapi.nets.faceRecognitionNet.loadFromUri("/models"),
    faceapi.nets.faceExpressionNet.loadFromUri("/models"),
  ]).then(startVideo);

  function startVideo() {
    navigator.getUserMedia(
      { video: {} },
      function (stream) {
        video.srcObject = stream
        havewebsnap = true;
      },
      err => console.error(err)
    );
  }
  document.getElementById("take_picture").setAttribute("disabled", "disabled");


  video.addEventListener("playing", () => {
    canvas = faceapi.createCanvasFromMedia(video);
    document.body.append(canvas);

    const displaySize = { width: video.scrollWidth, height: video.scrollHeight };
    faceapi.matchDimensions(canvas, displaySize);

    document.getElementById("loading").style.display = 'none';

    interval = setInterval(async () => {
      const detections = await faceapi
        .detectAllFaces(video)
        .withFaceLandmarks()
        .withFaceExpressions();


      //document.getElementById("faceFound").innerHTML =  detections.length + "Faces Found" ;
      //document.getElementById("faceFound").css("color","red");

      if (detections.length < 1) {
        document.getElementById("faceFound").innerHTML = "No" + "Face Found";
        document.getElementById("take_picture").setAttribute("disabled", "disabled");
        document.getElementById("faceFound").style.color = "red";


      }
      else if (detections.length > 1) {
        document.getElementById("faceFound").innerHTML = "Multiple" + "Faces Found";
        document.getElementById("take_picture").setAttribute("disabled", "disabled");
        document.getElementById("faceFound").style.color = "red";


      } else {

        document.getElementById("faceFound").innerHTML = "One" + "Face Found";
        document.getElementById("faceFound").style.color = "green";
        document.getElementById("take_picture").removeAttribute("disabled");

      }


      //const resizedDetections = faceapi.resizeResults(detections, displaySize);

      //canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);

      //faceapi.draw.drawDetections(canvas, resizedDetections);
    }, 300);
  });

  document.getElementById("take_picture").addEventListener("click", async function () {


    if (!havewebsnap) {
      alert("Please allow portal permission to open webcam");
      navigator.getUserMedia(
        { video: {} }, function (stream) {
          video.srcObject = stream
          havewebsnap = true;
        },

        err => console.error(err)
      );
      return;
    }
    clearInterval(interval);
    document.getElementById("faceFound").innerHTML = "";

    //let canvas = document.querySelector("#canvas");
    let picture = await faceapi
      .detectSingleFace(video).withFaceLandmarks().withFaceDescriptor();

    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
    var fieldNameElement = document.getElementById('message-content');



    const faceMatcher = new faceapi.FaceMatcher(picture)

    let image_data_url = canvas.toDataURL('image/jpeg');
    let canvas2 = document.querySelectorAll("canvas");
    canvas2[0].style.display = 'none';
    // data url of the image
    console.log(image_data_url);


    var formData = new FormData();
    formData.append("image", image_data_url);
    //formData.append("image_tensor", faceMatcher);

    // for (var key of formData.entries()) {
    //     console.log(key[0] + ', ' + key[1]);
    // }
    fieldNameElement.innerText = 'Processing...';

    fetch('CurrentImage', {
      method: 'POST',
      body: formData,
    }).then(response => response.text())
      .then(async function (response) {

        console.log(response)

        if (response.slice(0, 4) == "Face") {
          alert(response);

          fieldNameElement.innerText = 'Please retake Photo';

        }
        else if (response.slice(0, 4) == "http") {
          window.location.href = response;
        }
        else if (response.slice(0, 8) == "approved") {

          const myArray = response.split("**");
          var visitorId = myArray[2];

          const imgUrl = window.location.origin + `/${visitorId}.jpeg`
          const img = await faceapi.fetchImage(imgUrl)
          //const img = await canvas.loadImage(imgUrl);
          // detect the face with the highest score in the image and compute it's landmarks and face descriptor
          const fullFaceDescription = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor()

          if (!fullFaceDescription) {
            console.log("No faces Found");
          }


          const bestMatch = faceMatcher.findBestMatch(fullFaceDescription.descriptor)
          console.log(bestMatch.toString())
          if (bestMatch.toString().indexOf("person") >= 0) {
            window.location.href = myArray[1];
          } else {
            alert("Face Verification Failed, Kindly retake photo to access portal");
            fieldNameElement.innerText = 'Please retake Photo';
          }

        }


        else {
          alert(response);

          window.location.href = window.location.origin;

          // var window = remote.getCurrentWindow();
          // window.close();
        }

      })
      .catch(err => console.log(err))


  });



</script>


</html>